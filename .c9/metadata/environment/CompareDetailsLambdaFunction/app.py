{"filter":false,"title":"app.py","tooltip":"/CompareDetailsLambdaFunction/app.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["{","    \"detail\": {","        \"bucket\": {","            \"name\": \"INSERT_YOUR_DOCUMENT_BUCKET\"","        },","    }","    \"application\": {","        \"app_uuid\": \"8d247914\"","        }","    }",""],"id":2}],[{"start":{"row":3,"column":21},"end":{"row":3,"column":48},"action":"remove","lines":["INSERT_YOUR_DOCUMENT_BUCKET"],"id":3},{"start":{"row":3,"column":21},"end":{"row":3,"column":48},"action":"insert","lines":["documentbucket-444275295554"]}],[{"start":{"row":0,"column":0},"end":{"row":10,"column":20},"action":"remove","lines":["{","    \"detail\": {","        \"bucket\": {","            \"name\": \"documentbucket-444275295554\"","        },","    }","    \"application\": {","        \"app_uuid\": \"8d247914\"","        }","    }","# Add your code here"],"id":4},{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"insert","lines":["\"Compare the license and selfie photos\"","import os","import boto3","","env_table = os.environ['TABLE']","env_topic = os.environ['TOPIC']","","s3 = boto3.client('s3')","unzipped_s3_prefix = \"unzipped/\"","dynamodb = boto3.resource('dynamodb')","ddb_table = dynamodb.Table(env_table)","rekognition = boto3.client('rekognition')","sns = boto3.client('sns')","","def compare_faces(app_uuid, bucket, license_key, selfie_key):","    \"calls rekognition to compare license and selfie\"","    print(\"Starting face comparison\")","    compare_response = rekognition.compare_faces(","        SourceImage={'S3Object': {","            'Bucket': bucket,","            'Name': license_key,","        }},","        TargetImage={'S3Object': {","            'Bucket': bucket,","            'Name': selfie_key,","        }},","        SimilarityThreshold=80","    )","","    if len(compare_response['FaceMatches']) < 1:","        photo_match_result = False","    else:","        photo_match_result = compare_response['FaceMatches'][0]['Similarity'] >= 80","","    # Update DDB with the photo match value.","    ddb_table.update_item(","        Key={","            'APP_UUID': app_uuid","            },","        UpdateExpression='SET LICENSE_SELFIE_MATCH = :p_match',","        ExpressionAttributeValues={","            ':p_match': photo_match_result","            }","        )","","    # Amazon SNS publish and Amazon S3 folder.","    if not photo_match_result:","        sns.publish(","            TopicArn= env_topic,","            Message= 'License photo validation FAILED',","            Subject='License photo validation FAILED',","            )","","    print(\"finished compare faces\")","    return photo_match_result","","def lambda_handler(event, context):","    \"Build the s3 references to the selfie and license and compare with rekognition\"","    bucket = event['detail']['bucket']['name']","    app_uuid = event[\"application\"][\"app_uuid\"]","    selfie_key = f\"{unzipped_s3_prefix}{app_uuid}_selfie.png\"","    license_key = f\"{unzipped_s3_prefix}{app_uuid}_license.png\"","","    # Submit the license and selfie to Amazon Rekognition to compare faces.","    rekog_response = compare_faces(app_uuid, bucket, license_key, selfie_key)","    if not rekog_response:","        raise ValueError('Photo rekognition match FAILED. Program will stop')","","    return True",""]}],[{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"remove","lines":["\"Compare the license and selfie photos\"","import os","import boto3","","env_table = os.environ['TABLE']","env_topic = os.environ['TOPIC']","","s3 = boto3.client('s3')","unzipped_s3_prefix = \"unzipped/\"","dynamodb = boto3.resource('dynamodb')","ddb_table = dynamodb.Table(env_table)","rekognition = boto3.client('rekognition')","sns = boto3.client('sns')","","def compare_faces(app_uuid, bucket, license_key, selfie_key):","    \"calls rekognition to compare license and selfie\"","    print(\"Starting face comparison\")","    compare_response = rekognition.compare_faces(","        SourceImage={'S3Object': {","            'Bucket': bucket,","            'Name': license_key,","        }},","        TargetImage={'S3Object': {","            'Bucket': bucket,","            'Name': selfie_key,","        }},","        SimilarityThreshold=80","    )","","    if len(compare_response['FaceMatches']) < 1:","        photo_match_result = False","    else:","        photo_match_result = compare_response['FaceMatches'][0]['Similarity'] >= 80","","    # Update DDB with the photo match value.","    ddb_table.update_item(","        Key={","            'APP_UUID': app_uuid","            },","        UpdateExpression='SET LICENSE_SELFIE_MATCH = :p_match',","        ExpressionAttributeValues={","            ':p_match': photo_match_result","            }","        )","","    # Amazon SNS publish and Amazon S3 folder.","    if not photo_match_result:","        sns.publish(","            TopicArn= env_topic,","            Message= 'License photo validation FAILED',","            Subject='License photo validation FAILED',","            )","","    print(\"finished compare faces\")","    return photo_match_result","","def lambda_handler(event, context):","    \"Build the s3 references to the selfie and license and compare with rekognition\"","    bucket = event['detail']['bucket']['name']","    app_uuid = event[\"application\"][\"app_uuid\"]","    selfie_key = f\"{unzipped_s3_prefix}{app_uuid}_selfie.png\"","    license_key = f\"{unzipped_s3_prefix}{app_uuid}_license.png\"","","    # Submit the license and selfie to Amazon Rekognition to compare faces.","    rekog_response = compare_faces(app_uuid, bucket, license_key, selfie_key)","    if not rekog_response:","        raise ValueError('Photo rekognition match FAILED. Program will stop')","","    return True",""],"id":5},{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"insert","lines":["\"Compare the details extracted from the license and the CSV file\"","import csv","import os","import boto3","","env_table = os.environ['TABLE']","env_topic = os.environ['TOPIC']","","s3 = boto3.client('s3')","unzipped_s3_prefix = \"unzipped/\"","dynamodb = boto3.resource('dynamodb')","ddb_table = dynamodb.Table(env_table)","textract = boto3.client('textract')","sns = boto3.client('sns')","","","def textract_response(bucket, license_key):","    \"Send license to textract\"","","    # Pass the license image to Amazon Textract to extract information.","    print(\"Starting license analysis\")","    response = textract.analyze_id(","        DocumentPages=[{","                'S3Object': {","                'Bucket': bucket,","                'Name': license_key","            }","        }]","    )","","    id_document = response['IdentityDocuments'][0]","    id_data = id_document['IdentityDocumentFields']","    id_fields = {}","","    # Build the dictionary of the .csv file's fields and Amazon Textract values.","    csv_fields = ['DOCUMENT_NUMBER','FIRST_NAME','LAST_NAME','DATE_OF_BIRTH',","                    'ADDRESS','STATE_IN_ADDRESS','CITY_IN_ADDRESS','ZIP_CODE_IN_ADDRESS']","    id_fields = { field['Type']['Text']: field['ValueDetection']['Text'] for field in id_data","                if field['Type']['Text'] in csv_fields }","    print(\"finished textract\")","    return id_fields","","","def compare_dictionaries(app_uuid, details_dict, textract_dict):","    \"Compare license and csv\"","    print(\"Comparing license and csv\")","","    comparison = details_dict == textract_dict","","    # Update DDB with the license data match value, and SNS publish.","    ddb_table.update_item(","        Key={","            'APP_UUID': app_uuid","            },","        UpdateExpression='SET LICENSE_DETAILS_MATCH = :d_match',","        ExpressionAttributeValues={","            ':d_match': comparison","            }","        )","","    if not comparison:","        sns.publish(","            TopicArn= env_topic,","            Message= 'Data validation between license and CSV FAILED',","            Subject='Data validation between license and CSV FAILED',","            )","        raise ValueError('Data comparison between App and license FAILED. Program will stop')","","    return comparison","","def lambda_handler(event, context):","    \"Download the CSV, send the license to textract and compare\"","    bucket = event['detail']['bucket']['name']","    app_uuid = event[\"application\"][\"app_uuid\"]","    details_key = f\"{unzipped_s3_prefix}{app_uuid}_details.csv\"","    details_file = f\"/tmp/{app_uuid}_details.csv\"","    license_key = f\"{unzipped_s3_prefix}{app_uuid}_license.png\"","","    s3.download_file(bucket, details_key, details_file)","","    with open(details_file, 'r', encoding=\"utf-8\") as file:","        reader = csv.DictReader(file)","        details_dict = next(reader)","","    # Submit the license to Amazon Textract to extract the fields.","    textract_dict = textract_response(bucket, license_key)","","    # Compare the Amazon Textract fields with the .csv file.","    compare_dictionaries(app_uuid, details_dict, textract_dict)","","    return True",""]}]]},"ace":{"folds":[],"scrolltop":1026,"scrollleft":0,"selection":{"start":{"row":91,"column":0},"end":{"row":91,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750921280175,"hash":"4ff8d8713fc53ba2a085138722f6436fb01a1f71"}