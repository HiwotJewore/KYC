{"filter":false,"title":"app.py","tooltip":"/CompareFacesLambdaFunction/app.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"insert","lines":["\"Compare the license and selfie photos\"","import os","import boto3","","env_table = os.environ['TABLE']","env_topic = os.environ['TOPIC']","","s3 = boto3.client('s3')","unzipped_s3_prefix = \"unzipped/\"","dynamodb = boto3.resource('dynamodb')","ddb_table = dynamodb.Table(env_table)","rekognition = boto3.client('rekognition')","sns = boto3.client('sns')","","def compare_faces(app_uuid, bucket, license_key, selfie_key):","    \"calls rekognition to compare license and selfie\"","    print(\"Starting face comparison\")","    compare_response = rekognition.compare_faces(","        SourceImage={'S3Object': {","            'Bucket': bucket,","            'Name': license_key,","        }},","        TargetImage={'S3Object': {","            'Bucket': bucket,","            'Name': selfie_key,","        }},","        SimilarityThreshold=80","    )","","    if len(compare_response['FaceMatches']) < 1:","        photo_match_result = False","    else:","        photo_match_result = compare_response['FaceMatches'][0]['Similarity'] >= 80","","    # Update DDB with the photo match value.","    ddb_table.update_item(","        Key={","            'APP_UUID': app_uuid","            },","        UpdateExpression='SET LICENSE_SELFIE_MATCH = :p_match',","        ExpressionAttributeValues={","            ':p_match': photo_match_result","            }","        )","","    # Amazon SNS publish and Amazon S3 folder.","    if not photo_match_result:","        sns.publish(","            TopicArn= env_topic,","            Message= 'License photo validation FAILED',","            Subject='License photo validation FAILED',","            )","","    print(\"finished compare faces\")","    return photo_match_result","","def lambda_handler(event, context):","    \"Build the s3 references to the selfie and license and compare with rekognition\"","    bucket = event['detail']['bucket']['name']","    app_uuid = event[\"application\"][\"app_uuid\"]","    selfie_key = f\"{unzipped_s3_prefix}{app_uuid}_selfie.png\"","    license_key = f\"{unzipped_s3_prefix}{app_uuid}_license.png\"","","    # Submit the license and selfie to Amazon Rekognition to compare faces.","    rekog_response = compare_faces(app_uuid, bucket, license_key, selfie_key)","    if not rekog_response:","        raise ValueError('Photo rekognition match FAILED. Program will stop')","","    return True",""],"id":2}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":31},"end":{"row":10,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1750920637789,"hash":"66f47aa35e4646187e2c71e31ac0a25444c78d51"}